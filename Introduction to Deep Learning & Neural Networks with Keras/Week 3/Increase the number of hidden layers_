{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Load the dataset (replace 'your_dataset.csv' with your dataset file)\ndata = pd.read_csv('your_dataset.csv')\n\n# Split the data into features (X) and target (y)\nX = data.drop(columns=['Strength'])\ny = data['Strength']\n\n# Normalize the input features by subtracting the mean and dividing by the standard deviation\nscaler = StandardScaler()\nX_normalized = scaler.fit_transform(X)\n\n# Split the normalized data into a training and test set (30% for testing)\nX_train, X_test, y_train, y_test = train_test_split(X_normalized, y, test_size=0.3, random_state=42)\n\n# Function to build and train the model\ndef build_model():\n    model = keras.Sequential([\n        keras.layers.Dense(10, activation='relu', input_shape=(X_train.shape[1],)),\n        keras.layers.Dense(1)  # Output layer with 1 neuron (regression)\n    ])\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model\n\n# Number of repetitions\nnum_repetitions = 50\nmse_list = []\n\n# Repeat steps 1-3 for 50 times with 100 epochs\nfor _ in range(num_repetitions):\n    model = build_model()\n    model.fit(X_train, y_train, epochs=100, verbose=0)  # Training with 100 epochs\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)\n    mse_list.append(mse)\n\n# Calculate mean and standard deviation of mean squared errors\nmean_mse = np.mean(mse_list)\nstd_mse = np.std(mse_list)\n\nprint(f\"Mean MSE with 100 epochs: {mean_mse}\")\nprint(f\"Standard Deviation of MSE with 100 epochs: {std_mse}\")\n",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "In this modified code, I increased the number of training epochs to 100. The rest of the procedure remains the same. After training the model with 100 epochs, the mean squared errors are calculated and compared to those from Part B (which used 50 epochs). Increasing the number of epochs may lead to improved model performance, but it's essential to monitor the validation performance to prevent overfitting.",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}